version: '3.8'
name: mart-project
services:

  payment-service-api:
    build:
      context: ./payment_service
      dockerfile: Dockerfile.dev
    volumes:
      - ./payment_service:/code  # Sync local development directory with the container
    depends_on:
        - postgres_payment_db
        - broker
    ports:
      - "8001:8001"  # Expose container port 8000 to host port 8001

  order-service-api:
    build:
      context: ./order_service
      dockerfile: Dockerfile.dev
    volumes:
      - ./order_service:/code  # Sync local development directory with the container
    depends_on:
        - postgres_order_db
        - broker
      
    ports:
      - "8004:8004"  # Expose container port 8000 to host port 8004 

  product-service-api:
    build:
      context: ./product_service
      dockerfile: Dockerfile.dev
    volumes:
      - ./product_service:/code  # Sync local development directory with the container
    depends_on:
        - postgres_product_db
        - broker
    ports:
      - "8003:8003"  # Expose container port 8000 to host port 8003 

  inventory-service-api:
    build:
      context: ./inventory_service
      dockerfile: Dockerfile.dev
    volumes:
      - ./inventory_service:/code  # Sync local development directory with the container
    depends_on:
        - postgres_inventory_db
        - broker
    ports:
      - "8002:8002"  # Expose container port 8000 to host port 8003 
      
  user-service-api:
    build:
      context: ./user_service
      dockerfile: Dockerfile.dev
    volumes:
      - ./user_service:/code  # Sync local development directory with the container
    depends_on:
        - postgres_user_db
        - broker
    ports:
      - "8005:8005"  # Expose container port 8000 to host port 8005 

  notification-service-api:
    build:
      context: ./notification_service
      dockerfile: Dockerfile.dev
    volumes:
      - ./notification_service:/code  # Sync local development directory with the container
    depends_on:
        - postgres_notification_db
        - broker
    ports:
      - "8006:8006"  # Expose container port 8000 to host port 8006


  ###########################       DataBases       #####################################

  postgres_payment_db:
    image: postgres:latest  # Use the official PostgreSQL image
    restart: always
    container_name: PostgresPaymentCont
    environment:
        - POSTGRES_USER=ziakhan
        - POSTGRES_PASSWORD=my_password
        - POSTGRES_DB=mydatabase
    ports:
        - '5433:5432'
    volumes:
        - postgres_payment_db:/var/lib/postgresql/datazz

  postgres_product_db:
    image: postgres:latest  # Use the official PostgreSQL image
    restart: always
    container_name: PostgresProductCont
    environment:
        - POSTGRES_USER=ziakhan
        - POSTGRES_PASSWORD=my_password
        - POSTGRES_DB=mydatabase
    ports:
        - '5434:5432'
    volumes:
        - postgres_product_db:/var/lib/postgresql/datazz

  postgres_order_db:
    image: postgres:latest  # Use the official PostgreSQL image
    restart: always
    container_name: PostgresOrderCont
    environment:
        - POSTGRES_USER=ziakhan
        - POSTGRES_PASSWORD=my_password
        - POSTGRES_DB=mydatabase
    ports:
        - '5435:5432'
    volumes:
        - postgres_order_db:/var/lib/postgresql/datazz

  postgres_inventory_db:
    image: postgres:latest  # Use the official PostgreSQL image
    restart: always
    container_name: PostgresInventoryCont
    environment:
        - POSTGRES_USER=ziakhan
        - POSTGRES_PASSWORD=my_password
        - POSTGRES_DB=mydatabase
    ports:
        - '5436:5432'
    volumes:
        - postgres_inventory_db:/var/lib/postgresql/datazz

  postgres_user_db:
    image: postgres:latest  # Use the official PostgreSQL image
    restart: always
    container_name: PostgresUserCont
    environment:
        - POSTGRES_USER=ziakhan
        - POSTGRES_PASSWORD=my_password
        - POSTGRES_DB=mydatabase
    ports:
        - '5437:5432'
    volumes:
        - postgres_user_db:/var/lib/postgresql/datazz

  postgres_notification_db:
    image: postgres:latest  # Use the official PostgreSQL image
    restart: always
    container_name: PostgresNotiCont
    environment:
        - POSTGRES_USER=ziakhan
        - POSTGRES_PASSWORD=my_password
        - POSTGRES_DB=mydatabase
    ports:
        - '5438:5432'
    volumes:
        - postgres_notification_db:/var/lib/postgresql/datazz



    ##########################     Broker      ################################   

    
  broker:
    image: apache/kafka:3.7.0
    hostname: broker
    container_name: broker
    ports:
      - '9092:9092'
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT_HOST://localhost:9092,PLAINTEXT://broker:19092'
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@broker:29093'
      KAFKA_LISTENERS: 'CONTROLLER://:29093,PLAINTEXT_HOST://:9092,PLAINTEXT://:19092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      CLUSTER_ID: '4L6g3nShT-eMCtK--X86sw'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: 'Local Kafka Cluster'
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: 'broker:19092'
      DYNAMIC_CONFIG_ENABLED: "true"
    depends_on:
      - broker

  #########################      Volumes        ##################################    

volumes:
  postgres_product_db:
    driver: local
  postgres_order_db:
    driver: local  
  postgres_payment_db:
    driver: local  
  postgres_inventory_db:
    driver: local  
  postgres_user_db:
    driver: local  
  postgres_notification_db:
    driver: local  



networks:
  default:
    driver: bridge
